package com.sc2geeks;

import com.sc2geeks.replay.dao.ReplayDAO;
import com.sc2geeks.replay.model.ActionConfig;
import com.sc2geeks.replay.model.ActionConfigUnit;
import com.sc2geeks.replay.model.GameEntity;
import com.sc2geeks.replay.model.MapEntity;
import com.sc2geeks.replay.parser.MapParser;
import com.sc2geeks.replay.parser.ReplayParser;
import com.sc2geeks.replayUtility.MainWorkerConfig;
import com.sc2geeks.replayUtility.SpringConfigProvider;
import com.sc2geeks.replayUtility.StarterBase;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.util.List;

/**
 * Created with IntelliJ IDEA.
 * User: robert
 * Date: 10/21/12
 * Time: 8:39 AM
 * To change this template use File | Settings | File Templates.
 */
public class Tester extends StarterBase
{
	private static MainWorkerConfig _workerConfig;
	public static void main(String[] args)
	{
		// testSplit();
		init(args);
		calcuateSummary();
		// constructSql();
		// testAction();

		// testImage();

		//String content = "";
		//Base64FileEncoder.decodeAndSave(content, "/MacData/data/a.jpg");
		// testLib();

	}

	private static void init(String[] args)
	{
		if (args.length > 0)
		{
			System.out.println(args[0]);
			SpringConfigProvider.setSpringConfigFile(args[0]);
		} else
		{
			SpringConfigProvider.setSpringConfigFile("config.xml");
		}
		ApplicationContext context = new ClassPathXmlApplicationContext(SpringConfigProvider.getSpringConfigFile());
		_workerConfig = context.getBean("workerConfig", MainWorkerConfig.class);

	}

	private static void testImage()
	{
		// String imageName = MapParser.generateMapFileName();
		MapEntity map = MapParser.parseNewMap("65/8e/658e520aa5deb48866dc2b21b023daa9a291be4cf22fd9d785ca67f178132a87.s2ma");
		System.out.println(map);
	}

	private static void testAction()
	{
		GameEntity game = ReplayDAO.getGame(46827);
		ReplayParser.parse(game, null, "/Volumes/MacData/Data/sc2geeks/parseXml/", false, false);
	}

	private static void testSplit()
	{
		ActionConfigUnit unit = ActionConfig.getActionByName("Build Infestation Pit");
		System.out.print(unit);
	}

	private static void constructSql()
	{
		List<ActionConfigUnit> actionList = ActionConfig.getActionList();
		StringBuilder sb = new StringBuilder();
		for (ActionConfigUnit action : actionList)
		{
			// sb.append("\t").append("sum(1-abs(sign(ActionUnitId - ").append(action.getId());
			// sb.append("))) as a").append(action.getId()).append(",\n");

			sb.append("\t`A").append(action.getId()).append("` INT NULL,\n");
		}
		System.out.print(sb);
	}

	public static void calcuateSummary()
	{
		ReplayDAO.calculateActionSummary(1303);
	}

}
